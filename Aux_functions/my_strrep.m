
function result = my_strrep(target, old_string, new_string)

reserved_f = {' ',...
            '+',...
            '-',...
            '*',...
            '/',...
            '\',...
            '(',...
            ')',...
            '[',...
            ']',...
            '{',...
            '}',...
            '|',...
            '&',...
            '^',...
            '=',...
            '~',...
            '@',...
            '#',...
            '$',...
            '&',...
            '>',...
            '<',...
            ',',...
            ';'
            };
        
reserved_b = {' ',...
            '+',...
            '-',...
            '*',...
            '/',...
            '\',...
            '.',...
            '(',...
            ']',...
            '}',...
            ')',...
            ']',...
            '}',...
            '|',...
            '&',...
            '^',...
            '=',...
            '~',...
            '@',...
            '#',...
            '$',...
            '&',...
            '>',...
            '<'            
            };

result = target;

N_target = length(target);

N_old = length(old_string);

N_new = length(new_string);

k = 1;

for n = 1:N_target - N_old + 1
    
    if strcmp(old_string, (target(n:n+N_old - 1)))
        
        if n ~= 1 && n ~= N_target
            
            if ~isempty(find(ismember(reserved_f, target(n-1)),1)) &&...
               ~isempty(find(ismember(reserved_b, target(n+N_old)),1))
           
                result = [result(1:k-1) new_string result(k+N_old:end)];
                
                k = k + N_new - N_old;
                
                n = n + N_old-1;
           
            end
            
        elseif n == 1
            
            if ~isempty(find(ismember(reserved_b, target(n+N_old)),1))
           
                result = [result(1:k-1) new_string result(k+N_old:end)];
                
                k = k + N_new - N_old;
                
                n = n + N_old-1;
           
            end
            
        elseif n == N_target
            
            if ~isempty(find(ismember(reserved_f, target(n-1)),1))               
           
                result = [result(1:k-1) new_string result(k+N_old:end)];
                
                k = k + N_new - N_old;
                
                n = n + N_old-1;
           
            end
            
        end
        
    end
    
    k = k+1;
    
end